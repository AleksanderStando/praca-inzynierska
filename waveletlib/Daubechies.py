import wavelet

class Daubechies(wavelet.Wavelet):
    #TODO: przenieść mapę do osobnej klasy
    map = {
        1: [  7.071067811865475244008443621048490392848359376884740365883398E-1,
                7.071067811865475244008443621048490392848359376884740365883398E-1],
        2: [ 4.829629131445341433748715998644486838169524195042022752011715E-1,
                8.365163037378079055752937809168732034593703883484392934953414E-1,
                2.241438680420133810259727622404003554678835181842717613871683E-1,
                -1.294095225512603811744494188120241641745344506599652569070016E-1],
        3: [ 3.326705529500826159985115891390056300129233992450683597084705E-1,
                8.068915093110925764944936040887134905192973949948236181650920E-1,
                4.598775021184915700951519421476167208081101774314923066433867E-1,
                -1.350110200102545886963899066993744805622198452237811919756862E-1,
                -8.544127388202666169281916918177331153619763898808662976351748E-2,
                3.522629188570953660274066471551002932775838791743161039893406E-2]
    }
    def __init__(self, order):
        self.dec_lo = [0] * (order * 2)
        self.dec_hi = [0] * (order * 2)
        self.dec_len = order*2
        self.family_name = "Daubechies";
        self.short_name = "db"
        self.support_width = 2*order - 1
        self.step = 2
        coeffs = self.map.get(order)
        for i in range(0, order * 2):
            self.dec_lo[i] = coeffs[2*order - 1 - i]
            self.dec_hi[i] = coeffs[i]* self.is_even(2*order-1-i)
    def is_even(self, number):
        if number % 2 == 0:
            return 1
        else:
            return -1
